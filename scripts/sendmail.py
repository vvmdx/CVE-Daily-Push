# -*- coding: utf-8 -*-
# @Time    : 2023/12/25 20:34
# @Author  : vvmdx
# @File    : sendmail.py
# @Project : CVE-news
import datetime
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from email.header import Header


class Sendmail():

    def __init__(self, smtp_domain, smtp_port, smtp_ssl, sender, authcode, receiver):
        """
        :param smtp_domain: 邮件服务器
        :param smtp_port: 邮件服务器端口（举个例子，qq邮箱服务器465端口是ssl，587则没有ssl）
        :param smtp_ssl: 是否是ssl，1是，0否
        :param sender: 发件人邮箱
        :param authcode: 邮箱授权码（此处用qq邮箱）
        :param receiver: 接收者邮箱列表
        """
        self.smtp_domain = smtp_domain
        self.smtp_port = smtp_port
        self.smtp_ssl = smtp_ssl
        self.sender = sender
        self.authcode = authcode
        self.receiver = receiver
        self.message = MIMEMultipart()

    def get_obj(self):
        """
        创建邮件对象，从文件读各种配置和收件人列表啥的
        :return:
        """
        for key, value in self.__dict__.items():
            print(f'{key}: {value}')

    def get_html(self):
        """
        读html，赋给邮件正文
        :return:
        """
        with open("../html/display.html", "r", encoding="utf-8") as file:
            template = file.read()
        file.close()
        return template

    def get_message(self, result):
        """
        创建需要发送的邮件对象及内容
        :return:
        """
        # 创建邮件对象
        message = MIMEMultipart()
        # 设置邮件主题
        yesterday = datetime.date.today() + datetime.timedelta(-1)
        subject = Header("CVE Changes on " + str(yesterday), "utf-8").encode()
        message['Subject'] = subject
        # 设置发件人
        message['From'] = formataddr(("CVE Daily Push", self.sender))
        # 设置收件人，不设置即默认密送
        # message['To'] = ','.join(self.receiver)
        # message['To'] = "vvmdx@qq.com"
        # 设置邮件内容
        # context = self.get_html()
        context = result
        text = MIMEText(context, "html", "utf-8")
        message.attach(text)

        self.message = message

    def send(self):
        try:
            server = ''
            # 连接SMTP服务器
            if self.smtp_ssl:
                server = smtplib.SMTP_SSL(self.smtp_domain, self.smtp_port)
            else:
                server = smtplib.SMTP(self.smtp_domain, self.smtp_port)
            # 登录邮箱账号
            server.login(self.sender, self.authcode)
            # 发送邮件
            server.sendmail(self.sender, self.receiver, self.message.as_string())
            # 关闭SMTP连接
            server.quit()
            print("success")
        except Exception as e:
            print("fail: ", e)


def get_mail_config():
    with open("../config/mail_config.json", "r") as file:
        config_ = json.load(file)
    obj = Sendmail(config_["smtp"]["domain"],
                   config_["smtp"]["port"],
                   config_["smtp"]["ssl"],
                   config_["sender"]["mail"],
                   config_["sender"]["authCode"],
                   config_["receivers"])
    obj.get_obj()
    return obj


def set_mail_config(config_):
    obj = Sendmail(config_["smtp"]["domain"],
                   config_["smtp"]["port"],
                   config_["smtp"]["ssl"],
                   config_["sender"]["mail"],
                   config_["sender"]["authCode"],
                   config_["receivers"])
    # obj.get_obj()
    return obj


def send_mail(result, mail_config):
    # obj = get_mail_config()
    obj = set_mail_config(mail_config)
    obj.get_message(result)
    obj.send()


